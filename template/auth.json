[
    {
        "file_path": "src/routes/auth/auth.js",
        "code": "import express from 'express';\nimport * as authController from '../../controllers/authController.js';\nimport { authenticate, get_current_user } from '../../middleware/authMiddleware.js';\nimport { generateToken, verifyToken } from '../../utils/jwt.js';\n\nconst router = express.Router();\n\nrouter.post('/register', async (req, res) => {\n  try {\n    const result = await authController.register(req.body);\n    return res.status(201).json({\n      data: result,\n      statuscode: 201,\n      detail: 'User registered successfully.',\n      error: '',\n    });\n  } catch (err) {\n    return res.status(err.status || 500).json({\n      data: null,\n      statuscode: err.status || 500,\n      detail: '',\n      error: err.message || 'Registration failed',\n    });\n  }\n});\n\nrouter.post('/login', async (req, res) => {\n  try {\n    const result = await authController.login(req.body);\n    res.cookie('refreshToken', result.refreshToken, {\n      httpOnly: true,\n      maxAge: 3 * 60 * 1000, // 3 minutes\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n    return res.status(200).json({\n      data: { token: result.token, refreshToken: result.refreshToken },\n      statuscode: 200,\n      detail: 'Login successful.',\n      error: '',\n    });\n  } catch (err) {\n    return res.status(err.status || 500).json({\n      data: null,\n      statuscode: err.status || 500,\n      detail: '',\n      error: err.message || 'Login failed',\n    });\n  }\n});\n\n// Authenticated route to get current user\nrouter.get('/me', authenticate, (req, res) => {\n  try {\n    const user = get_current_user(req);\n    return res.status(200).json({\n      data: user,\n      statuscode: 200,\n      detail: 'User fetched successfully.',\n      error: '',\n    });\n  } catch (err) {\n    return res.status(err.status || 401).json({\n      data: null,\n      statuscode: err.status || 401,\n      detail: '',\n      error: err.message || 'User not authenticated',\n    });\n  }\n});\n\n// Dummy authenticated route\nrouter.get('/dummy', authenticate, (req, res) => {\n  return res.status(200).json({\n    data: { user: req.user },\n    statuscode: 200,\n    detail: 'You are authenticated!',\n    error: '',\n  });\n});\n\nrouter.post('/refresh-token', async (req, res) => {\n  const refreshToken = req.body.refreshToken || req.cookies.refreshToken;\n  if (!refreshToken) {\n    return res.status(400).json({\n      data: null,\n      statuscode: 400,\n      detail: '',\n      error: 'Refresh token required',\n    });\n  }\n  try {\n    const user = verifyToken(refreshToken);\n    const newAccessToken = generateToken({ id: user.id, email: user.email });\n    return res.status(200).json({\n      data: { accessToken: newAccessToken },\n      statuscode: 200,\n      detail: 'Access token refreshed successfully.',\n      error: '',\n    });\n  } catch (err) {\n    return res.status(401).json({\n      data: null,\n      statuscode: 401,\n      detail: '',\n      error: 'Invalid or expired refresh token',\n    });\n  }\n});\n\nexport default router; "
    },
    {
        "file_path": "src/routes/index.js",
        "code": "import express from 'express';\nimport authRoutes from './auth/auth.js';\n\nconst router = express.Router();\n\nrouter.use('/auth', authRoutes);\n\nexport default router; "
    },
    {
        "file_path": "src/middleware/authMiddleware.js",
        "code": "import jwt from 'jsonwebtoken';\nimport { JWT_SECRET } from '../constants/auth.js';\n\nexport function authenticate(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      data: null,\n      statuscode: 401,\n      detail: '',\n      error: 'No token provided',\n    });\n  }\n  const token = authHeader.split(' ')[1];\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    return res.status(401).json({\n      data: null,\n      statuscode: 401,\n      detail: '',\n      error: 'Invalid or expired token',\n    });\n  }\n}\n\nexport function get_current_user(req) {\n  if (!req.user) {\n    throw { status: 401, message: 'User not authenticated' };\n  }\n  return req.user;\n} "
    },
    {
        "file_path": "src/constants/auth.js",
        "code": "import dotenv from 'dotenv';\ndotenv.config();\n\nexport const ACCESS_TOKEN_EXPIRY = '1m';\nexport const REFRESH_TOKEN_EXPIRY = '3m';\nexport const JWT_SECRET = process.env.JWT_SECRET;\nexport const SALT_ROUNDS = 10;"
    },
    {
        "file_path": "src/controllers/authController.js",
        "code": "import * as authUsecase from '../usecases/authUsecase.js';\n\nexport async function register(userData) {\n  try {\n    return await authUsecase.register(userData);\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Registration failed' };\n  }\n}\n\nexport async function login(userData) {\n  try {\n    return await authUsecase.login(userData);\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Login failed' };\n  }\n} "
    },
    {
        "file_path": "src/services/authService.js",
        "code": "import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport * as userRepository from '../repositories/userRepository.js';\nimport { generateToken, generateRefreshToken } from '../utils/jwt.js';\nimport { SALT_ROUNDS } from '../constants/auth.js';\n\nexport async function register({ email, password }) {\n  try {\n    const existingUser = await userRepository.findByEmail(email);\n    if (existingUser) {\n      throw { status: 400, message: 'User already exists' };\n    }\n    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\n    const user = await userRepository.create({ email, password: hashedPassword });\n    return { id: user._id, email: user.email };\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Service registration failed' };\n  }\n}\n\nexport async function login({ email, password }) {\n  try {\n    const user = await userRepository.findByEmail(email);\n    if (!user) {\n      throw { status: 404, message: 'User not found' };\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      throw { status: 401, message: 'Invalid credentials' };\n    }\n    const token = generateToken({ id: user._id, email: user.email });\n    const refreshToken = generateRefreshToken({ id: user._id, email: user.email });\n    return { token, refreshToken };\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Service login failed' };\n  }\n} "
    },
    {
        "file_path": "src/usecases/authUsecase.js",
        "code": "import * as authService from '../services/authService.js';\n\nexport async function register(userData) {\n  try {\n    return await authService.register(userData);\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Registration usecase failed' };\n  }\n}\n\nexport async function login(userData) {\n  try {\n    return await authService.login(userData);\n  } catch (err) {\n    throw { status: err.status || 500, message: err.message || 'Login usecase failed' };\n  }\n} "
    },
    {
        "file_path": "src/utils/jwt.js",
        "code": "import jwt from 'jsonwebtoken';\nimport { JWT_SECRET, ACCESS_TOKEN_EXPIRY, REFRESH_TOKEN_EXPIRY } from '../constants/auth.js';\n\nexport function generateToken(payload) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: ACCESS_TOKEN_EXPIRY });\n}\n\nexport function generateRefreshToken(payload) {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: REFRESH_TOKEN_EXPIRY });\n}\n\nexport function verifyToken(token) {\n  return jwt.verify(token, JWT_SECRET);\n}"
    }
]